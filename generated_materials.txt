**問題 1:**
**題目:** 1. 一般作業系統的核心部件不含下列那一項？
**選項:**
- (A) 記憶體管理器（ Memory Manager ）
- (B) 排程器（ Scheduler ）
- (C) 載入程式（Loader ）
- (D) 多媒體（ Multimedia ）應用軟體
**教材內容:**
作業系統的核心部件主要負責系統的運行和管理，包括記憶體管理、進程調度、設備管理等。

* **記憶體管理器 (Memory Manager):**  負責分配和管理系統的記憶體資源，確保不同的程序都能有效地使用記憶體，避免記憶體衝突和浪費。這是作業系統的核心功能之一。

* **排程器 (Scheduler):**  負責決定哪個程序應該在什麼時候運行，以最佳化系統的效能和資源利用率。這是作業系統的核心功能之一。

* **載入程式 (Loader):**  負責將程序從儲存裝置載入到記憶體中，並準備好程序執行所需的環境。雖然不是最核心，但也是作業系統啟動和運行程序的必要組成部分。

* **多媒體 (Multimedia) 應用軟體:** 這屬於應用軟體的範疇，而非作業系統的核心部件。作業系統提供多媒體應用程式執行的平台和環境，但多媒體應用程式本身並非作業系統的核心組成部分。

因此，答案是 (D) 多媒體應用軟體。作業系統的核心部件主要負責系統的底層管理和資源分配，而多媒體應用程式是建立在作業系統之上的應用程式。

--------------------

**問題 2:**
**題目:** 2. 請重組下列電腦開機啟動（ Booting）時各項運作的正確順序：
**選項:**
- ①執行作業系統②CPU 啟動後執行位於 ROM中預設位置之指令亦即開機載入
- 程式（ Bootstrap ）③將作業系統核心載入主記憶體④ 執行輸出入及各種硬體裝
- 置之檢查。
- (A) 1234
- (B) 2431
- (C) 2341
- (D) 2314
**教材內容:**
電腦開機啟動（Booting）的過程大致如下：

1. **CPU 啟動後執行位於 ROM 中預設位置之指令（Bootstrap 程式）：** 電源開啟後，CPU 會先執行儲存在 ROM (唯讀記憶體) 中的開機程式 (Bootstrap Program)。這個程式非常小，它的主要功能是初始化硬體，並找到作業系統的開機載入程式。

2. **執行輸出入及各種硬體裝置之檢查：** Bootstrap 程式會執行基本的硬體檢查，確認硬體設備是否正常運作，例如記憶體、硬碟、鍵盤、滑鼠等等。

3. **將作業系統核心載入主記憶體：**  Bootstrap 程式找到作業系統的開機載入程式後，會將其載入到主記憶體中。

4. **執行作業系統：**  作業系統核心載入主記憶體後，便開始執行，系統正式啟動，使用者可以開始使用電腦。


因此，正確的順序是 2 → 4 → 3 → 1，所以答案是 (B) 2431。

--------------------

**問題 3:**
**題目:** 3. 在一個採用需求分頁機制的計算機系統中，現 有使用效率量測如下： (1) CPU 使
**選項:**
- 用率： 20%，(2) Pagin Drum ：93%，(3) 其他週邊  I/O 12% 。為提高  CPU 的使
- 用率，此時應採取下列何種策略最佳？
- (A) 換更快的  CPU
- (B) 找一個更大的 Paging Drum
- (C) 換更快的週邊設備
- (D) 降低多程式度（ degree of multiprogramming ）
**教材內容:**
這個題目描述了一個需求分頁系統，其中CPU使用率只有20%，Paging Drum使用率卻高達93%，其他週邊I/O使用率為12%。這表示系統的瓶頸在於Paging Drum，也就是虛擬記憶體的磁碟交換速度太慢。

(A) 換更快CPU：CPU使用率低，換更快CPU不會改善系統整體效能，因為瓶頸不在CPU。

(B) 找一個更大的Paging Drum：更大的Paging Drum並不能直接提升速度，反而可能增加尋址時間，問題仍然存在。

(C) 換更快週邊設備：其他週邊I/O使用率只有12%，不是系統瓶頸，所以換更快設備沒有顯著效果。

(D) 降低多程式度：降低多程式度會減少同時執行的程序數量，減少Paging Drum的負載，從而提升Paging Drum的效率，進而提升整體系統效能，解決CPU使用率低的根本原因。

因此，最佳策略是(D)降低多程式度。

--------------------

**問題 4:**
**題目:** 4. 全球資訊網（ WWW）的瀏覽器都提供「上一頁」的功能，讓使用者退回前一
**選項:**
- 個網頁，下列那一個資料結構最適合來實作此功能？
- (A) 堆積（Heap ）
- (B) 堆疊
- (C) AVL 樹（AVL Tree ）
- (D) 佇列
**教材內容:**
瀏覽器的「上一頁」功能需要儲存使用者瀏覽網頁的順序，並按照反向順序逐一返回。堆疊 (Stack) 是一種後進先出 (LIFO) 的資料結構，符合這個需求。使用者瀏覽的每個網頁都像是一個元素被壓入堆疊中，點選「上一頁」則相當於從堆疊中彈出 (pop) 最上面(最後瀏覽) 的元素。

其他選項：
* 堆積 (Heap)：主要用於優先佇列的實作，與網頁瀏覽順序無關。
* AVL 樹 (AVL Tree)：是一種平衡二元搜尋樹，用於高效的搜尋、插入和刪除操作，但對於「上一頁」功能來說，其效率優勢並不明顯，且複雜度較高。
* 佇列 (Queue)：是一種先進先出 (FIFO) 的資料結構，不符合網頁瀏覽的逆序返回需求。

因此，堆疊是最適合實作瀏覽器「上一頁」功能的資料結構。

--------------------

