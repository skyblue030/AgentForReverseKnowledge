**問題 1:**
**題目:** 1. 一般作業系統的核心部件不含下列那一項？
**選項:**
- (A) 記憶體管理器（ Memory Manager ）
- (B) 排程器（ Scheduler ）
- (C) 載入程式（Loader ）
- (D) 多媒體（ Multimedia ）應用軟體
**教材內容:**
1. Which of the following is NOT a core component of a typical operating system?

The question asks about the core components of an operating system (OS).  An OS is the fundamental software that manages computer hardware and software resources and provides common services for computer programs.  Let's analyze each option:

* **(A) Memory Manager:** This component is crucial.  It allocates and manages computer memory, ensuring efficient use and preventing conflicts between different programs.  It handles tasks like paging, segmentation, and virtual memory.  This is a core OS function.

* **(B) Scheduler:** The scheduler is responsible for managing the execution of processes. It determines which process gets CPU time and when, aiming for efficient resource utilization and responsiveness. This is another fundamental component of an OS.

* **(C) Loader:** The loader is responsible for loading programs into memory and preparing them for execution. This involves tasks like linking, relocation, and setting up the program's execution environment. This is a vital part of the OS's functionality.

* **(D) Multimedia (Multimedia) applications:** Multimedia applications, such as media players or video editors, are *not* core components of the operating system. They are application programs that run *on top* of the OS, utilizing its services (like the memory manager, scheduler, and file system) but not integral parts of the OS itself.

Therefore, the correct answer is (D) because multimedia applications are user-level programs, not part of the OS kernel or its essential services.  The other options are all fundamental parts of the OS kernel responsible for managing system resources and executing programs.

--------------------

**問題 2:**
**題目:** 2. 請重組下列電腦開機啟動（ Booting）時各項運作的正確順序：
**選項:**
- ①執行作業系統②CPU 啟動後執行位於 ROM中預設位置之指令亦即開機載入
- 程式（ Bootstrap ）③將作業系統核心載入主記憶體④ 執行輸出入及各種硬體裝
- 置之檢查。
- (A) 1234
- (B) 2431
- (C) 2341
- (D) 2314
**教材內容:**
The question asks about the correct order of operations during the computer boot process. Let's break down the steps and analyze the options.

The boot process involves several crucial steps:

1. **Power On Self Test (POST):**  When the computer is powered on, the CPU initiates a self-test of essential hardware components. This includes checking the RAM, CPU, and basic input/output devices.  This corresponds to option 2's "④ 執行輸出入及各種硬體裝置之檢查" and part of option 2's "②CPU 啟動後執行位於 ROM中預設位置之指令亦即開機載入程式（ Bootstrap ）".  The BIOS (Basic Input/Output System), stored in ROM, performs this test.

2. **Bootstrap Loader:** After the POST, the BIOS loads a small program called the bootstrap loader from ROM. This loader is responsible for locating and loading the operating system (OS) kernel. This corresponds to the remaining part of option 2's "②CPU 啟動後執行位於 ROM中預設位置之指令亦即開機載入程式（ Bootstrap ）".

3. **Loading the OS Kernel:** The bootstrap loader loads the operating system kernel into the main memory (RAM). This is represented by option 2's "③將作業系統核心載入主記憶體".

4. **Execution of the OS:** Once the kernel is loaded, the operating system takes over, managing system resources and executing user applications. This is option 1's "①執行作業系統".

Therefore, the correct order is 2, 4, 3, 1.  This corresponds to option (B).

Let's analyze why other options are incorrect:

* **(A) 1234:** This is incorrect because the operating system cannot be executed before the kernel is loaded and the hardware is checked.
* **(C) 2341:** This incorrectly places the hardware check after the OS kernel loading.
* **(D) 2314:** This also incorrectly places the hardware check after the kernel loading.

In summary, the correct sequence reflects the fundamental stages of booting a computer, starting with hardware checks, loading the bootstrap program, loading the OS kernel, and finally, initiating the OS.  The correct answer is (B) 2431.

--------------------

**問題 3:**
**題目:** 3. 在一個採用需求分頁機制的計算機系統中，現 有使用效率量測如下： (1) CPU 使
**選項:**
- 用率： 20%，(2) Pagin Drum ：93%，(3) 其他週邊  I/O 12% 。為提高  CPU 的使
- 用率，此時應採取下列何種策略最佳？
- (A) 換更快的  CPU
- (B) 找一個更大的 Paging Drum
- (C) 換更快的週邊設備
- (D) 降低多程式度（ degree of multiprogramming ）
**教材內容:**
The question describes a computer system using demand paging and provides utilization metrics: CPU utilization at 20%, Paging Drum utilization at 93%, and other I/O utilization at 12%.  The goal is to identify the best strategy to improve CPU utilization.

The key concept here is **I/O-bound vs. CPU-bound processes** and the impact of demand paging on system performance.  Demand paging brings pages into memory only when needed.  A high paging drum utilization (93%) indicates that the system is spending a significant amount of time swapping pages between main memory and secondary storage (the paging drum). This is a major bottleneck, significantly limiting CPU utilization.

Let's analyze the options:

* **(A) Replacing the CPU with a faster one:** While a faster CPU would improve processing speed for the tasks currently in memory, it won't address the core problem—the extremely high paging drum utilization. The CPU is mostly idle because it's waiting for data from the paging drum.  A faster CPU won't change this waiting time.

* **(B) Getting a larger Paging Drum:** A larger paging drum would increase the amount of storage available, but it doesn't directly reduce the time spent waiting for page swaps. The high utilization suggests the problem isn't a lack of space, but rather the frequency of page swaps.

* **(C) Replacing peripherals with faster ones:**  The I/O utilization is only 12%, which is relatively low.  Improving I/O speed won't significantly impact the CPU utilization, which is primarily constrained by the paging drum.

* **(D) Reducing the degree of multiprogramming:** This is the best solution.  A high degree of multiprogramming leads to more processes competing for memory.  This increases the likelihood of page faults (demanding pages from the paging drum), hence the high paging drum utilization. By reducing the number of concurrently running processes, the demand on the paging drum decreases, freeing up the CPU to execute processes more efficiently.  This directly addresses the bottleneck and improves CPU utilization.


Therefore, the correct answer is (D).  The high paging drum utilization is the bottleneck, and reducing the multiprogramming degree directly addresses this bottleneck.  The other options address symptoms, not the root cause.

--------------------

**問題 4:**
**題目:** 4. 全球資訊網（ WWW）的瀏覽器都提供「上一頁」的功能，讓使用者退回前一
**選項:**
- 個網頁，下列那一個資料結構最適合來實作此功能？
- (A) 堆積（Heap ）
- (B) 堆疊
- (C) AVL 樹（AVL Tree ）
- (D) 佇列
**教材內容:**
The question asks which data structure is most suitable for implementing the "back" button functionality in a web browser, allowing users to navigate back to the previously visited webpage.

The core concept here is the Last-In, First-Out (LIFO) principle.  When a user visits a webpage, that page's URL is added to the history. When the user clicks "back," the most recently visited page (the last one added) should be displayed. This behavior perfectly aligns with the LIFO structure of a stack.

Let's analyze the options:

* **(A) Heap:** A heap is a tree-based data structure that satisfies the heap property (e.g., in a min-heap, the parent node is always smaller than its children).  Heaps are typically used for priority queues or heapsort, not for managing browsing history where LIFO is needed.  Therefore, a heap is not suitable.

* **(B) Stack:** A stack is a LIFO data structure.  The "push" operation adds an element to the top, and the "pop" operation removes the top element.  This directly mirrors the browser's back button functionality:  pushing URLs onto the stack as pages are visited and popping them off as the user navigates back.  Therefore, a stack is the most appropriate data structure.

* **(C) AVL Tree:** An AVL tree is a self-balancing binary search tree.  While efficient for searching, insertion, and deletion, it doesn't inherently support the LIFO behavior required for the back button.  There's no natural way to efficiently access the most recently added element without traversing the tree.

* **(D) Queue:** A queue is a FIFO (First-In, First-Out) data structure.  This is the opposite of what's needed for the back button.  The first page visited would be the last one accessed, which is incorrect.


In summary, the stack's LIFO nature perfectly matches the requirement of accessing the most recently visited webpage first, making it the ideal choice for implementing the "back" button functionality in a web browser.  Therefore, the correct answer is (B).

--------------------

